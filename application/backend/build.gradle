import org.jooq.meta.jaxb.Logging

plugins {
    id("com.github.johnrengelman.shadow") version "7.0.0"
    id("io.micronaut.application") version "1.5.4"
    id("nu.studer.jooq") version "6.0"
    id("org.flywaydb.flyway") version "7.12.1"
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("ru.venchok.*")
    }
}

dependencies {
    jooqGenerator("org.postgresql:postgresql:${property("postgresVersion")}")
    annotationProcessor("org.projectlombok:lombok:${property("lombokVersion")}")
    annotationProcessor("org.mapstruct:mapstruct-processor:${property("mapstructVersion")}")

    implementation("io.micronaut.views:micronaut-views-thymeleaf:2.3.0")
    implementation("org.mapstruct:mapstruct:${property("mapstructVersion")}")
    implementation("org.postgresql:postgresql:${property("postgresVersion")}")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut:micronaut-validation")
    implementation("javax.annotation:javax.annotation-api")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly(project(":frontend"))
    compileOnly("org.projectlombok:lombok:${property("lombokVersion")}")
}

task copyWebApp(type: Copy) {
    from("$rootDir/application/frontend/build")
    into("$rootDir/application/backend/build/resources/main/views/.")
}


application {
    mainClass.set("ru.venchok.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

jooq {
    version = '3.15.0'
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = true

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'postgres://pvufrcrqqefagq:38037e5246947ef26276092845f851feb77b0d0b21b46060318c3e36cde3c8e2@ec2-52-214-178-113.eu-west-1.compute.amazonaws.com:5432/d99b0p00grvdsl'
                    user = 'pvufrcrqqefagq'
                    password = '38037e5246947ef26276092845f851feb77b0d0b21b46060318c3e36cde3c8e2'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'ru.venchok.jooq'
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

flyway {
    url = 'postgres://pvufrcrqqefagq:38037e5246947ef26276092845f851feb77b0d0b21b46060318c3e36cde3c8e2@ec2-52-214-178-113.eu-west-1.compute.amazonaws.com:5432/d99b0p00grvdsl'
    user = 'pvufrcrqqefagq'
    password = '38037e5246947ef26276092845f851feb77b0d0b21b46060318c3e36cde3c8e2'
    driver = 'org.postgresql.Driver'
    schemas = ['public']
}

shadowJar.dependsOn(copyWebApp)
compileJava.dependsOn(":frontend:build")
tasks.generateJooq.dependsOn(tasks.flywayMigrate)



